CodeWhisperer 3 LIS 

Test: QA 
test_all_negative_numbers (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_all_same_elements_except_one (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_alternating_sequence (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_decreasing_sequence (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_empty_list (LIS_test.TestLongestIncreasingSubsequence) ... ERROR
test_example_1 (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_example_2 (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_example_3 (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_increasing_and_decreasing_sequence (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_large_input (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_large_input_reverse (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_mixed_numbers (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_negative_numbers (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_non_consecutive_increases (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_one_long_increasing_sequence_amidst_decreasing (LIS_test.TestLongestIncreasingSubsequence) ... FAIL
test_random_case_1 (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_random_case_2 (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_random_case_with_negatives (LIS_test.TestLongestIncreasingSubsequence) ... FAIL
test_random_case_with_zeros (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_repeating_elements_at_end (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_repeating_elements_at_start (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_sequence_with_alternating_large_small_numbers (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_sequence_with_duplicates_and_increases (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_sequence_with_large_numbers (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_sequence_with_one_increasing_element (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_single_element (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_two_elements_decreasing (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_two_elements_increasing (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_very_large_input (LIS_test.TestLongestIncreasingSubsequence) ... ok

Failed Test Cases Summary:
- test_one_long_increasing_sequence_amidst_decreasing: Failed
- test_random_case_with_negatives: Failed
- test_empty_list: Failed
----------------------------------------------------------------------
Ran 29 tests in 0.412s

FAILED (failures=2, errors=1)

Summary:
Total tests run: 29
Passed tests: 26
Failed tests: 3
Pass percentage: 89.66%

Test: Time 
Average running time over 100 runs: 0.39275214 seconds

Test: Memory 
Average memory usage over 100 runs: 38.11 MiB

Test: Maintainability 
=======================================
Analyzing maintainability of LIS.py
=======================================

=====================================
Cyclomatic Complexity (CC)
-------------------------------------
LIS.py
    F 1:0 lengthOfLIS - A

1 blocks (classes, functions, methods) analyzed.
Average complexity: A (5.0)
=====================================

=====================================
Halstead Metrics
-------------------------------------
LIS.py:
    h1: 5
    h2: 11
    N1: 6
    N2: 12
    vocabulary: 16
    length: 18
    calculated_length: 49.663388279447084
    volume: 72.0
    difficulty: 2.727272727272727
    effort: 196.36363636363635
    time: 10.909090909090908
    bugs: 0.024
=====================================

=====================================
Raw Metrics
-------------------------------------
LIS.py
    LOC: 10
    LLOC: 8
    SLOC: 8
    Comments: 0
    Single comments: 0
    Multi: 0
    Blank: 2
    - Comment Stats
        (C % L): 0%
        (C % S): 0%
        (C + M % L): 0%
=====================================

=====================================
Maintainability Index (MI)
-------------------------------------
LIS.py - A (66.62)
=====================================

Test: Style 
************* Module LIS
LIS.py:1:0: C0114: Missing module docstring (missing-module-docstring)
LIS.py:1:0: C0103: Module name "LIS" doesn't conform to snake_case naming style (invalid-name)
LIS.py:1:0: C0116: Missing function or method docstring (missing-function-docstring)
LIS.py:1:0: C0103: Function name "lengthOfLIS" doesn't conform to snake_case naming style (invalid-name)

------------------------------------------------------------------
Your code has been rated at 5.00/10 (previous run: 6.00/10, -1.00)

