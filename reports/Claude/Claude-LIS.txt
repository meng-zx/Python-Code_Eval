Claude 3 LIS 

Test: QA 
test_all_negative_numbers (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_all_same_elements_except_one (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_alternating_sequence (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_decreasing_sequence (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_empty_list (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_example_1 (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_example_2 (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_example_3 (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_increasing_and_decreasing_sequence (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_large_input (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_large_input_reverse (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_mixed_numbers (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_negative_numbers (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_non_consecutive_increases (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_one_long_increasing_sequence_amidst_decreasing (LIS_test.TestLongestIncreasingSubsequence) ... FAIL
test_random_case_1 (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_random_case_2 (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_random_case_with_negatives (LIS_test.TestLongestIncreasingSubsequence) ... FAIL
test_random_case_with_zeros (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_repeating_elements_at_end (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_repeating_elements_at_start (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_sequence_with_alternating_large_small_numbers (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_sequence_with_duplicates_and_increases (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_sequence_with_large_numbers (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_sequence_with_one_increasing_element (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_single_element (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_two_elements_decreasing (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_two_elements_increasing (LIS_test.TestLongestIncreasingSubsequence) ... ok
test_very_large_input (LIS_test.TestLongestIncreasingSubsequence) ... ok

Failed Test Cases Summary:
- test_one_long_increasing_sequence_amidst_decreasing: Failed
- test_random_case_with_negatives: Failed
----------------------------------------------------------------------
Ran 29 tests in 0.540s

FAILED (failures=2)

Summary:
Total tests run: 29
Passed tests: 27
Failed tests: 2
Pass percentage: 93.10%

Test: Time 
Average running time over 100 runs: 0.50168306 seconds

Test: Memory 
Average memory usage over 100 runs: 38.06 MiB

Test: Maintainability 
=======================================
Analyzing maintainability of LIS.py
=======================================

=====================================
Cyclomatic Complexity (CC)
-------------------------------------
LIS.py
    F 1:0 lengthOfLIS - A

1 blocks (classes, functions, methods) analyzed.
Average complexity: A (5.0)
=====================================

=====================================
Halstead Metrics
-------------------------------------
LIS.py:
    h1: 4
    h2: 7
    N1: 4
    N2: 7
    vocabulary: 11
    length: 11
    calculated_length: 27.651484454403228
    volume: 38.053747805010275
    difficulty: 2.0
    effort: 76.10749561002055
    time: 4.228194200556697
    bugs: 0.012684582601670092
=====================================

=====================================
Raw Metrics
-------------------------------------
LIS.py
    LOC: 13
    LLOC: 10
    SLOC: 10
    Comments: 1
    Single comments: 0
    Multi: 0
    Blank: 3
    - Comment Stats
        (C % L): 8%
        (C % S): 10%
        (C + M % L): 8%
=====================================

=====================================
Maintainability Index (MI)
-------------------------------------
LIS.py - A (84.27)
=====================================

Test: Style 
************* Module LIS
LIS.py:13:0: C0304: Final newline missing (missing-final-newline)
LIS.py:1:0: C0114: Missing module docstring (missing-module-docstring)
LIS.py:1:0: C0103: Module name "LIS" doesn't conform to snake_case naming style (invalid-name)
LIS.py:1:0: C0116: Missing function or method docstring (missing-function-docstring)
LIS.py:1:0: C0103: Function name "lengthOfLIS" doesn't conform to snake_case naming style (invalid-name)

------------------------------------------------------------------
Your code has been rated at 5.00/10 (previous run: 5.00/10, +0.00)

